// Package apiv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package apiv1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for GameID.
const (
	Check           GameID = "check"
	Crash           GameID = "crash"
	Crashm          GameID = "crashm            |"
	PhMoneyrocket97 GameID = "ph_moneyrocket_97"
	PhSlimbo97      GameID = "ph_slimbo_97"
)

// BetIsAlreadyActiveError defines model for BetIsAlreadyActiveError.
type BetIsAlreadyActiveError = ErrorResponse

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Details Additional details about the error (maily for debug purposes). This won't be shown to the user but we can get more information about it in our logs.
	Details string `json:"details"`

	// Message User readable message that can be shown to the user (or parsed on our FE side). It should be user-friendly and in English.
	Message string `json:"message"`
}

// GameID defines model for GameID.
type GameID string

// GameSession defines model for GameSession.
type GameSession struct {
	GameUrl string `json:"game_url"`
}

// User defines model for User.
type User struct {
	// Country Country code ISO 3166-1
	Country   *string `json:"country,omitempty"`
	Firstname *string `json:"firstname,omitempty"`

	// Id User's ID (external)
	Id       string  `json:"id"`
	Lastname *string `json:"lastname,omitempty"`
	Nickname *string `json:"nickname,omitempty"`
}

// UserBalance defines model for UserBalance.
type UserBalance struct {
	// Amount The amount of balance in currency cents.
	Amount int64 `json:"amount"`

	// Currency The currency code in ISO4217.
	Currency string `json:"currency"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/4RU0U7cSgz9Fcv3SoCUXcS9CNS8QaHVPiEV+kQRmsw4yZSZceqZFKLt/ns1u8suZQPN",
	"S5yxj4997MkcNfuOA4UUsZxj1C15tTTPKc3imRNSZjjTyf6kSxGW7FLOXdVY3s7xX6EaS/zncJvmcJ3j",
	"cBn+hWLHIRIu7hYF/nlUzrET7kiSpSWloaSsW5tRi+2S5YAlnhljs6kcrGNAVdwnSC0B5aSw75V1A9Qs",
	"YKjqG+h66ThSPJjCTWsjPHLYS1ARxJYfAyRegvtIAlWf4JFAqwANJfAsBDbULF5l1jWXTWADcC/guInT",
	"bwELTENHWGJMYkODiwI9xaga2m3haybKYqrKEazDILUqLXlH69pngU5JJAO8Yv50CdEaOpjCLGVA70yG",
	"5uhJLZaCcQOoYHKll6FxNrajhS4KFPrRWyGD5e2m6mIzgrsNhKvvpFPu7bPyNLvIrVHofcbplvQDFqhF",
	"xfb57eHF8wsL7Nr76Kyv+P7D6erTc6BBWD9Qymd3I0JmsmuKcane60VplKf7Xly23+9sEznWUJ7JbnLN",
	"fUgy7I7w48oBmg3B7PoK/j86OZkcja1BbSWmoDyNVFigNeP7sRdhdgH79JRIgnIHY5mdeidxsPrhDecr",
	"Xax5U5Fz5VTQI9dT+SzAbuk3LcHKB1xDtYLnDdS9CAU9gM4/hum2HRsSNSRY4NOk4cn29OQ4V/GMG6fa",
	"Zs1zsCGP4vi/o9PpX9d83cALgl0NMibffSxD71yB3FFQncUS8+qq1MaVZ/E7AAD//3TMUHQ7BQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
