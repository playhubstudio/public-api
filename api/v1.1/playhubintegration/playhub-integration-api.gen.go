// Package playhubintegrationapiv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package playhubintegrationapiv1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
	externalRef0 "github.com/playhubstudio/public-api/api/v1.1"
)

// Defines values for BalanceRequestAction.
const (
	Balance BalanceRequestAction = "balance"
)

// Defines values for BetRequestAction.
const (
	BetRequestActionBet BetRequestAction = "bet"
)

// Defines values for BetRequestType.
const (
	BetRequestTypeBet  BetRequestType = "bet"
	BetRequestTypeFree BetRequestType = "free"
)

// Defines values for RefundRequestAction.
const (
	Refund RefundRequestAction = "refund"
)

// Defines values for WinRequestAction.
const (
	WinRequestActionWin WinRequestAction = "win"
)

// Defines values for WinRequestType.
const (
	WinRequestTypeFree WinRequestType = "free"
	WinRequestTypeWin  WinRequestType = "win"
)

// BalanceRequest defines model for BalanceRequest.
type BalanceRequest struct {
	// Action The action name. Should be 'balance'.
	Action BalanceRequestAction `json:"action"`

	// SessionId The Game Session's ID (external). Provided by client via Create New Game request.
	SessionId string `json:"session_id"`
}

// BalanceRequestAction The action name. Should be 'balance'.
type BalanceRequestAction string

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse struct {
	// Balance The user's balance in selected currency units. Currency selected by the client during the
	// Create New Game call.
	Balance string `json:"balance"`
}

// BetRequest defines model for BetRequest.
type BetRequest struct {
	// Action The action name. Should be 'bet'.
	Action BetRequestAction `json:"action"`

	// Amount The amount of the bet in currency units.
	Amount string `json:"amount"`

	// FrcId Free Rounds Config ID (internal) on Playhub side.
	// This field is provided only for Free Rounds (where type ='free') and during Free Rounds finalization.
	FrcId *openapi_types.UUID `json:"frc_id,omitempty"`

	// RoundId Game's round ID. Non unique, could be the same for different games.
	RoundId openapi_types.UUID `json:"round_id"`

	// SessionId The Game Session's ID (external). Provided by client via Create New Game request.
	SessionId string `json:"session_id"`

	// TxId Unique ID for the bet (internal) on Playhub side.
	// Could be used as idempotency key (within a single round).
	TxId openapi_types.UUID `json:"tx_id"`

	// Type The type of the bet. 'Bet' type means regular bet, 'Free' type means free bet (see Free Rounds section).
	// In case of "free" type, the real amount on your side should not be changed.
	Type BetRequestType `json:"type"`
}

// BetRequestAction The action name. Should be 'bet'.
type BetRequestAction string

// BetRequestType The type of the bet. 'Bet' type means regular bet, 'Free' type means free bet (see Free Rounds section).
// In case of "free" type, the real amount on your side should not be changed.
type BetRequestType string

// BetResponse defines model for BetResponse.
type BetResponse struct {
	// Balance The user's balance in currency units after bet is applied.
	Balance string `json:"balance"`

	// TxId Unique ID for the bet on your side. This is required for further tracking/debugging pusposes.
	TxId string `json:"tx_id"`
}

// RefundRequest defines model for RefundRequest.
type RefundRequest struct {
	// Action The action name. Should be 'refund'.
	Action RefundRequestAction `json:"action"`

	// OrigTxId Original transaction ID (internal) on Playhub side (bet or win).
	// This is the ID of the transaction that should be refunded.
	OrigTxId openapi_types.UUID `json:"orig_tx_id"`

	// SessionId The Game Session's ID (external). Provided by client via Create New Game request.
	SessionId string `json:"session_id"`

	// TxId Unique ID for the refund (internal) on Playhub side.
	// Could be used as idempotency key (within a single round).
	TxId openapi_types.UUID `json:"tx_id"`
}

// RefundRequestAction The action name. Should be 'refund'.
type RefundRequestAction string

// RefundResponse defines model for RefundResponse.
type RefundResponse struct {
	// Balance The user's balance in currency units after win is applied.
	Balance string `json:"balance"`

	// TxId Unique ID for the refund transaction on your side. This is required for further tracking/debugging pusposes.
	TxId string `json:"tx_id"`
}

// WinRequest defines model for WinRequest.
type WinRequest struct {
	// Action The action name. Should be 'win'.
	Action WinRequestAction `json:"action"`

	// Amount The amount of the bet in currency units.
	Amount string `json:"amount"`

	// FrcId Free Rounds Config ID (internal) on Playhub side.
	// This field is provided only for Free Rounds (where type ='free') and during Free Rounds finalization.
	FrcId *openapi_types.UUID `json:"frc_id,omitempty"`

	// RoundId Game's round ID. Non unique, could be the same for different games.
	RoundId openapi_types.UUID `json:"round_id"`

	// SessionId The Game Session's ID (external). Provided by client via Create New Game request.
	SessionId string `json:"session_id"`

	// TxId Unique ID for the win (internal) on Playhub side.
	// Could be used as idempotency key (within a single round).
	TxId openapi_types.UUID `json:"tx_id"`

	// Type The type of the win. 'Win' type means regular bet, 'Free' type means free bet (see Free Rounds section).
	// In case of "free" type, the real amount on your side should not be changed.
	Type WinRequestType `json:"type"`
}

// WinRequestAction The action name. Should be 'win'.
type WinRequestAction string

// WinRequestType The type of the win. 'Win' type means regular bet, 'Free' type means free bet (see Free Rounds section).
// In case of "free" type, the real amount on your side should not be changed.
type WinRequestType string

// WinResponse defines model for WinResponse.
type WinResponse struct {
	// Balance The user's balance in currency units after win is applied.
	Balance string `json:"balance"`

	// TxId Unique ID for the win on your side. This is required for further tracking/debugging pusposes.
	TxId string `json:"tx_id"`
}

// PostBalanceParams defines parameters for PostBalance.
type PostBalanceParams struct {
	// XREQUESTSIGN Request signature (read more in the Authentication section)
	XREQUESTSIGN string `json:"X-REQUEST-SIGN"`
}

// PostBetParams defines parameters for PostBet.
type PostBetParams struct {
	// XREQUESTSIGN Request signature (read more in the Authentication section)
	XREQUESTSIGN string `json:"X-REQUEST-SIGN"`
}

// PostRefundParams defines parameters for PostRefund.
type PostRefundParams struct {
	// XREQUESTSIGN Request signature (read more in the Authentication section)
	XREQUESTSIGN string `json:"X-REQUEST-SIGN"`
}

// PostWinParams defines parameters for PostWin.
type PostWinParams struct {
	// XREQUESTSIGN Request signature (read more in the Authentication section)
	XREQUESTSIGN string `json:"X-REQUEST-SIGN"`
}

// PostBalanceJSONRequestBody defines body for PostBalance for application/json ContentType.
type PostBalanceJSONRequestBody = BalanceRequest

// PostBetJSONRequestBody defines body for PostBet for application/json ContentType.
type PostBetJSONRequestBody = BetRequest

// PostRefundJSONRequestBody defines body for PostRefund for application/json ContentType.
type PostRefundJSONRequestBody = RefundRequest

// PostWinJSONRequestBody defines body for PostWin for application/json ContentType.
type PostWinJSONRequestBody = WinRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostBalanceWithBody request with any body
	PostBalanceWithBody(ctx context.Context, params *PostBalanceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBalance(ctx context.Context, params *PostBalanceParams, body PostBalanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBetWithBody request with any body
	PostBetWithBody(ctx context.Context, params *PostBetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBet(ctx context.Context, params *PostBetParams, body PostBetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRefundWithBody request with any body
	PostRefundWithBody(ctx context.Context, params *PostRefundParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRefund(ctx context.Context, params *PostRefundParams, body PostRefundJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostWinWithBody request with any body
	PostWinWithBody(ctx context.Context, params *PostWinParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostWin(ctx context.Context, params *PostWinParams, body PostWinJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostBalanceWithBody(ctx context.Context, params *PostBalanceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBalanceRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBalance(ctx context.Context, params *PostBalanceParams, body PostBalanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBalanceRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBetWithBody(ctx context.Context, params *PostBetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBetRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBet(ctx context.Context, params *PostBetParams, body PostBetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBetRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRefundWithBody(ctx context.Context, params *PostRefundParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRefundRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRefund(ctx context.Context, params *PostRefundParams, body PostRefundJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRefundRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWinWithBody(ctx context.Context, params *PostWinParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWinRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWin(ctx context.Context, params *PostWinParams, body PostWinJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWinRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostBalanceRequest calls the generic PostBalance builder with application/json body
func NewPostBalanceRequest(server string, params *PostBalanceParams, body PostBalanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBalanceRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostBalanceRequestWithBody generates requests for PostBalance with any type of body
func NewPostBalanceRequestWithBody(server string, params *PostBalanceParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/balance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-REQUEST-SIGN", runtime.ParamLocationHeader, params.XREQUESTSIGN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-REQUEST-SIGN", headerParam0)

	}

	return req, nil
}

// NewPostBetRequest calls the generic PostBet builder with application/json body
func NewPostBetRequest(server string, params *PostBetParams, body PostBetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBetRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostBetRequestWithBody generates requests for PostBet with any type of body
func NewPostBetRequestWithBody(server string, params *PostBetParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bet")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-REQUEST-SIGN", runtime.ParamLocationHeader, params.XREQUESTSIGN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-REQUEST-SIGN", headerParam0)

	}

	return req, nil
}

// NewPostRefundRequest calls the generic PostRefund builder with application/json body
func NewPostRefundRequest(server string, params *PostRefundParams, body PostRefundJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRefundRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostRefundRequestWithBody generates requests for PostRefund with any type of body
func NewPostRefundRequestWithBody(server string, params *PostRefundParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/refund")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-REQUEST-SIGN", runtime.ParamLocationHeader, params.XREQUESTSIGN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-REQUEST-SIGN", headerParam0)

	}

	return req, nil
}

// NewPostWinRequest calls the generic PostWin builder with application/json body
func NewPostWinRequest(server string, params *PostWinParams, body PostWinJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostWinRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostWinRequestWithBody generates requests for PostWin with any type of body
func NewPostWinRequestWithBody(server string, params *PostWinParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/win")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-REQUEST-SIGN", runtime.ParamLocationHeader, params.XREQUESTSIGN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-REQUEST-SIGN", headerParam0)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostBalanceWithBodyWithResponse request with any body
	PostBalanceWithBodyWithResponse(ctx context.Context, params *PostBalanceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBalanceResponse, error)

	PostBalanceWithResponse(ctx context.Context, params *PostBalanceParams, body PostBalanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBalanceResponse, error)

	// PostBetWithBodyWithResponse request with any body
	PostBetWithBodyWithResponse(ctx context.Context, params *PostBetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBetResponse, error)

	PostBetWithResponse(ctx context.Context, params *PostBetParams, body PostBetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBetResponse, error)

	// PostRefundWithBodyWithResponse request with any body
	PostRefundWithBodyWithResponse(ctx context.Context, params *PostRefundParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRefundResponse, error)

	PostRefundWithResponse(ctx context.Context, params *PostRefundParams, body PostRefundJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRefundResponse, error)

	// PostWinWithBodyWithResponse request with any body
	PostWinWithBodyWithResponse(ctx context.Context, params *PostWinParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWinResponse, error)

	PostWinWithResponse(ctx context.Context, params *PostWinParams, body PostWinJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWinResponse, error)
}

type PostBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BalanceResponse
	JSON400      *externalRef0.ErrorResponse
	JSON401      *externalRef0.ErrorResponse
	JSON404      *externalRef0.ErrorResponse
	JSON500      *externalRef0.ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetResponse
	JSON400      *externalRef0.ErrorResponse
	JSON401      *externalRef0.ErrorResponse
	JSON404      *externalRef0.ErrorResponse
	JSON500      *externalRef0.ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostBetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRefundResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RefundResponse
	JSON400      *externalRef0.ErrorResponse
	JSON401      *externalRef0.ErrorResponse
	JSON404      *externalRef0.ErrorResponse
	JSON500      *externalRef0.ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostRefundResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRefundResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostWinResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WinResponse
	JSON400      *externalRef0.ErrorResponse
	JSON401      *externalRef0.ErrorResponse
	JSON404      *externalRef0.ErrorResponse
	JSON500      *externalRef0.ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostWinResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostWinResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostBalanceWithBodyWithResponse request with arbitrary body returning *PostBalanceResponse
func (c *ClientWithResponses) PostBalanceWithBodyWithResponse(ctx context.Context, params *PostBalanceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBalanceResponse, error) {
	rsp, err := c.PostBalanceWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBalanceResponse(rsp)
}

func (c *ClientWithResponses) PostBalanceWithResponse(ctx context.Context, params *PostBalanceParams, body PostBalanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBalanceResponse, error) {
	rsp, err := c.PostBalance(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBalanceResponse(rsp)
}

// PostBetWithBodyWithResponse request with arbitrary body returning *PostBetResponse
func (c *ClientWithResponses) PostBetWithBodyWithResponse(ctx context.Context, params *PostBetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBetResponse, error) {
	rsp, err := c.PostBetWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBetResponse(rsp)
}

func (c *ClientWithResponses) PostBetWithResponse(ctx context.Context, params *PostBetParams, body PostBetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBetResponse, error) {
	rsp, err := c.PostBet(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBetResponse(rsp)
}

// PostRefundWithBodyWithResponse request with arbitrary body returning *PostRefundResponse
func (c *ClientWithResponses) PostRefundWithBodyWithResponse(ctx context.Context, params *PostRefundParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRefundResponse, error) {
	rsp, err := c.PostRefundWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRefundResponse(rsp)
}

func (c *ClientWithResponses) PostRefundWithResponse(ctx context.Context, params *PostRefundParams, body PostRefundJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRefundResponse, error) {
	rsp, err := c.PostRefund(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRefundResponse(rsp)
}

// PostWinWithBodyWithResponse request with arbitrary body returning *PostWinResponse
func (c *ClientWithResponses) PostWinWithBodyWithResponse(ctx context.Context, params *PostWinParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWinResponse, error) {
	rsp, err := c.PostWinWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWinResponse(rsp)
}

func (c *ClientWithResponses) PostWinWithResponse(ctx context.Context, params *PostWinParams, body PostWinJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWinResponse, error) {
	rsp, err := c.PostWin(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWinResponse(rsp)
}

// ParsePostBalanceResponse parses an HTTP response from a PostBalanceWithResponse call
func ParsePostBalanceResponse(rsp *http.Response) (*PostBalanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BalanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostBetResponse parses an HTTP response from a PostBetWithResponse call
func ParsePostBetResponse(rsp *http.Response) (*PostBetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostRefundResponse parses an HTTP response from a PostRefundWithResponse call
func ParsePostRefundResponse(rsp *http.Response) (*PostRefundResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRefundResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RefundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostWinResponse parses an HTTP response from a PostWinWithResponse call
func ParsePostWinResponse(rsp *http.Response) (*PostWinResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostWinResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WinResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"bm//EwAA//9bB+asrTAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "../common-components.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
