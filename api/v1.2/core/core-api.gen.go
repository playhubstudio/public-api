// Package coreapiv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package coreapiv1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
	externalRef0 "github.com/playhubstudio/public-api/api/v1.2"
)

// Defines values for CreateNewGameRequestProviderid.
const (
	Playhub CreateNewGameRequestProviderid = "playhub"
)

// Defines values for GetGamesParamsThumbnailShape.
const (
	Portrait GetGamesParamsThumbnailShape = "portrait"
	Square   GetGamesParamsThumbnailShape = "square"
)

// CancelFreeRoundsRequest defines model for CancelFreeRoundsRequest.
type CancelFreeRoundsRequest struct {
	// Cid Client's ID (internal)
	Cid openapi_types.UUID `json:"cid"`

	// ExternalId Free rounds ID (external). Used as idempotency key. One of id or external_id must be provided.
	ExternalId *string `json:"external_id,omitempty"`

	// Id Free rounds ID (internal). Used as idempotency key. One of id or external_id must be provided.
	Id *openapi_types.UUID `json:"id,omitempty"`
}

// CancelFreeRoundsResponse defines model for CancelFreeRoundsResponse.
type CancelFreeRoundsResponse struct {
	// ExternalId Free rounds ID (external). It always provided on create request.
	ExternalId string `json:"external_id"`

	// Id Free rounds ID (internal).
	Id openapi_types.UUID `json:"id"`
}

// CreateFreeRoundsRequest defines model for CreateFreeRoundsRequest.
type CreateFreeRoundsRequest struct {
	// BetLine Number of bet line configured for this game/provider.
	BetLine int32 `json:"bet_line"`

	// Cid Client's ID (internal)
	Cid openapi_types.UUID `json:"cid"`

	// Currency Currency code in ISO4217
	Currency string `json:"currency"`

	// ExternalCid External Client's ID (game aggregator or casino)
	ExternalCid string `json:"external_cid"`

	// ExternalId Free rounds ID (external). Used as idempotency key. Same ID can be used to create free rounds only once.
	ExternalId string `json:"external_id"`

	// GameId Game's ID
	GameId string `json:"game_id"`

	// ProviderId Provider ID. If you're using `Playhub Integration Adapter` pass `playhub` here.
	ProviderId string `json:"provider_id"`

	// Quantity Number of free rounds.
	Quantity int32 `json:"quantity"`

	// UserIds List of player IDs (external). if null then campaign is available for all players.
	UserIds *[]string `json:"user_ids,omitempty"`

	// ValidFrom Start date when free rounds become available. ISO 8601. This should be in future.
	// It's not possible to create Free Rounds campaign in the past. If you want to create a campaign "from now",
	// just add a few seconds to the current time. Creation process is synchronous, so make sure that under heavy load
	// our server could process this request for a few seconds.
	ValidFrom time.Time `json:"valid_from"`

	// ValidUntil End date when free rounds become unavailable. Could be setup later. ISO 8601.
	ValidUntil *time.Time `json:"valid_until,omitempty"`
}

// CreateFreeRoundsResponse defines model for CreateFreeRoundsResponse.
type CreateFreeRoundsResponse struct {
	// ExternalId Free rounds ID (external). This is provided in the request.
	ExternalId string `json:"external_id"`

	// Id Free rounds ID (internal)
	Id openapi_types.UUID `json:"id"`
}

// CreateNewGameRequest defines model for CreateNewGameRequest.
type CreateNewGameRequest struct {
	// Cid Client's ID (internal). It's provided by us and is used to identify the client.
	Cid openapi_types.UUID `json:"cid"`

	// Currency Currency code in ISO4217
	Currency string `json:"currency"`

	// Demo Demo mode. If true, the game will be launched in demo mode (means no callbacks will be called on your side,
	// and we use our demo balance for the game). If false, the game will be launched in real mode.
	Demo *bool `json:"demo,omitempty"`

	// Extcid External Client's ID (game aggregator or casino). This is your ID, which helps you to identify us. We use
	// it in all callbacks to you.
	Extcid *string `json:"extcid,omitempty"`

	// Gameid Game's ID. See the list of supported games in `Game IDs` section.
	Gameid string `json:"gameid"`

	// Locale Locale code in ISO639-1
	Locale string `json:"locale"`

	// Providerid Provider ID. If you're using `Playhub Integration Adapter` pass `playhub` here.
	Providerid *CreateNewGameRequestProviderid `json:"providerid,omitempty"`

	// Returnurl Return URL
	Returnurl *string `json:"returnurl,omitempty"`

	// Sessionid External Client's Session ID (game integrator or casino).This is your Session ID. We use
	// it in all callbacks to you. Could be missed for a demo game.
	Sessionid *string            `json:"sessionid,omitempty"`
	User      *externalRef0.User `json:"user,omitempty"`
}

// CreateNewGameRequestProviderid Provider ID. If you're using `Playhub Integration Adapter` pass `playhub` here.
type CreateNewGameRequestProviderid string

// CreateNewGameResponse defines model for CreateNewGameResponse.
type CreateNewGameResponse struct {
	GameSessionId openapi_types.UUID `json:"game_session_id"`
	GameUrl       string             `json:"game_url"`
}

// CurrenciesResponse defines model for CurrenciesResponse.
type CurrenciesResponse = []CurrencyInfo

// CurrencyInfo defines model for CurrencyInfo.
type CurrencyInfo struct {
	// Code Currency code ISO4217
	Code string `json:"code"`

	// DecimalPlaces Number of decimal places
	DecimalPlaces int64 `json:"decimal_places"`

	// IsCrypto Is this currency a cryptocurrency. If true then this currency is a cryptocurrency.
	IsCrypto bool `json:"is_crypto"`

	// IsFractionalFor Currency code in ISO4217 for which this currency is fractional. If null then this currency is not fractional.
	IsFractionalFor *string `json:"is_fractional_for,omitempty"`

	// IsVirtual Is this currency a virtual currency. If true then this currency is a virtual currency.
	IsVirtual bool `json:"is_virtual"`

	// Name Currency name
	Name string `json:"name"`

	// Symbol Currency symbol
	Symbol string `json:"symbol"`
}

// FreeRoundsResponse defines model for FreeRoundsResponse.
type FreeRoundsResponse struct {
	// BetLine Number of bet line configured for this game/provider.
	BetLine int32 `json:"bet_line"`

	// CID Client's ID (internal)
	CID openapi_types.UUID `json:"cid"`

	// Currency Currency code in ISO4217
	Currency string `json:"currency"`

	// DeletedAt Date when free rounds campaign was deleted. If null then campaign is active. ISO 8601.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`

	// ExtID Free rounds ID (external).
	ExtID string `json:"external_id"`

	// GameID Game's ID
	GameID string `json:"game_id"`

	// ID Free rounds ID (internal).
	ID openapi_types.UUID `json:"id"`

	// Quantity Number of free rounds.
	Quantity int32 `json:"quantity"`

	// UserIDs List of player IDs (external). if null then campaign is available for all players.
	UserIDs *[]string `json:"user_ids,omitempty"`

	// ValidFrom Start date when free rounds become available. ISO 8601.
	ValidFrom time.Time `json:"valid_from"`

	// ValidUntil End date when free rounds become unavailable. ISO 8601.
	ValidUntil *time.Time `json:"valid_until,omitempty"`
}

// GameInfo defines model for GameInfo.
type GameInfo struct {
	// FreeSpins If game supports free spins
	FreeSpins bool `json:"free_spins"`

	// Id Game's ID (internal)
	Id string `json:"id"`

	// Locales List of supported locales in English, delimited by comma
	Locales string `json:"locales"`

	// Thumbnail URL to the game's thumbnail
	Thumbnail string `json:"thumbnail"`

	// Title Game's title in English
	Title string `json:"title"`
}

// GamesResponse defines model for GamesResponse.
type GamesResponse = []GameInfo

// GetGameRoundHistoryRequest defines model for GetGameRoundHistoryRequest.
type GetGameRoundHistoryRequest struct {
	// GameID Game's ID. See the list of supported games in `Game IDs` section.
	GameID string `json:"game_id"`

	// RoundID Round ID which was played in one of the Game ID sessions
	RoundID openapi_types.UUID `json:"round_id"`

	// UserID External User ID who played the round
	UserID string `json:"user_id"`
}

// GetGameRoundHistoryResponse defines model for GetGameRoundHistoryResponse.
type GetGameRoundHistoryResponse struct {
	BetAmount        string             `json:"bet_amount"`
	CashOutAt        string             `json:"cash_out_at"`
	ClientHash       string             `json:"client_hash"`
	Currency         string             `json:"currency"`
	GameSessionID    openapi_types.UUID `json:"game_session_id"`
	PayoutAmount     string             `json:"payout_amount"`
	PayoutMultiplier string             `json:"payout_multiplier"`
	Result           string             `json:"result"`
	RoundID          openapi_types.UUID `json:"round_id"`

	// RoundUrl URL where game round history is rendered by game (if supported by game)
	RoundUrl         *string `json:"round_url,omitempty"`
	TargetMultiplier string  `json:"target_multiplier"`
	UserBalance      string  `json:"user_balance"`
	UserBonusBalance string  `json:"user_bonus_balance"`
}

// UpdateFreeRoundsRequest defines model for UpdateFreeRoundsRequest.
type UpdateFreeRoundsRequest struct {
	// Cid Client's ID (internal)
	Cid openapi_types.UUID `json:"cid"`

	// ExternalId Free rounds ID (external). Used as idempotency key if present. One of id or external_id must be provided.
	ExternalId *string `json:"external_id,omitempty"`

	// Id Free rounds ID (internal). Used as idempotency key if present. One of id or external_id must be provided.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// UserIds List of player IDs. if null then campaign is available for all players.
	UserIds *[]string `json:"user_ids,omitempty"`

	// ValidUntil End date when free rounds become unavailable. Could be setup later. ISO 8601.
	ValidUntil *time.Time `json:"valid_until,omitempty"`
}

// UpdateFreeRoundsResponse defines model for UpdateFreeRoundsResponse.
type UpdateFreeRoundsResponse struct {
	// ExternalId Free rounds ID (external). It always provided on create request.
	ExternalId string `json:"external_id"`

	// Id Free rounds ID (internal)
	Id openapi_types.UUID `json:"id"`
}

// GetCurrenciesParams defines parameters for GetCurrencies.
type GetCurrenciesParams struct {
	// CID Client's ID
	CID openapi_types.UUID `form:"cid" json:"cid"`

	// XREQUESTSIGN Request signature (read more in the Authentication section)
	XREQUESTSIGN string `json:"X-REQUEST-SIGN"`
}

// GetFreeRoundsParams defines parameters for GetFreeRounds.
type GetFreeRoundsParams struct {
	// CID Client's ID
	CID openapi_types.UUID `form:"cid" json:"cid"`

	// ID Free rounds campaign ID (internal). One of id or extid must be provided.
	ID *openapi_types.UUID `form:"id,omitempty" json:"id,omitempty"`

	// ExtID Free rounds campaign ID (external). One of id or extid must be provided.
	ExtID *string `form:"ext_id,omitempty" json:"ext_id,omitempty"`

	// XREQUESTSIGN Request signature (read more in the Authentication section)
	XREQUESTSIGN string `json:"X-REQUEST-SIGN"`
}

// PostFreeRoundsParams defines parameters for PostFreeRounds.
type PostFreeRoundsParams struct {
	// XREQUESTSIGN Request signature (read more in the Authentication section)
	XREQUESTSIGN string `json:"X-REQUEST-SIGN"`
}

// PutFreeRoundsParams defines parameters for PutFreeRounds.
type PutFreeRoundsParams struct {
	// XREQUESTSIGN Request signature (read more in the Authentication section)
	XREQUESTSIGN string `json:"X-REQUEST-SIGN"`
}

// PostFreeRoundsCancelParams defines parameters for PostFreeRoundsCancel.
type PostFreeRoundsCancelParams struct {
	// XREQUESTSIGN Request signature (read more in the Authentication section)
	XREQUESTSIGN string `json:"X-REQUEST-SIGN"`
}

// PostGameCreateNewParams defines parameters for PostGameCreateNew.
type PostGameCreateNewParams struct {
	// XREQUESTSIGN Request signature (read more in the Authentication section)
	XREQUESTSIGN string `json:"X-REQUEST-SIGN"`
}

// PostGameRoundHistoryParams defines parameters for PostGameRoundHistory.
type PostGameRoundHistoryParams struct {
	// XREQUESTSIGN Request signature (read more in the Authentication section)
	XREQUESTSIGN string `json:"X-REQUEST-SIGN"`
}

// GetGamesParams defines parameters for GetGames.
type GetGamesParams struct {
	// CID Client's ID
	CID openapi_types.UUID `form:"cid" json:"cid"`

	// ThumbnailShape Thumbnail shape (portrait or square). Default value is square.
	ThumbnailShape *GetGamesParamsThumbnailShape `form:"thumbnail_shape,omitempty" json:"thumbnail_shape,omitempty"`

	// XREQUESTSIGN Request signature (read more in the Authentication section)
	XREQUESTSIGN string `json:"X-REQUEST-SIGN"`
}

// GetGamesParamsThumbnailShape defines parameters for GetGames.
type GetGamesParamsThumbnailShape string

// PostFreeRoundsJSONRequestBody defines body for PostFreeRounds for application/json ContentType.
type PostFreeRoundsJSONRequestBody = CreateFreeRoundsRequest

// PutFreeRoundsJSONRequestBody defines body for PutFreeRounds for application/json ContentType.
type PutFreeRoundsJSONRequestBody = UpdateFreeRoundsRequest

// PostFreeRoundsCancelJSONRequestBody defines body for PostFreeRoundsCancel for application/json ContentType.
type PostFreeRoundsCancelJSONRequestBody = CancelFreeRoundsRequest

// PostGameCreateNewJSONRequestBody defines body for PostGameCreateNew for application/json ContentType.
type PostGameCreateNewJSONRequestBody = CreateNewGameRequest

// PostGameRoundHistoryJSONRequestBody defines body for PostGameRoundHistory for application/json ContentType.
type PostGameRoundHistoryJSONRequestBody = GetGameRoundHistoryRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetCurrencies request
	GetCurrencies(ctx context.Context, params *GetCurrenciesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFreeRounds request
	GetFreeRounds(ctx context.Context, params *GetFreeRoundsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFreeRoundsWithBody request with any body
	PostFreeRoundsWithBody(ctx context.Context, params *PostFreeRoundsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFreeRounds(ctx context.Context, params *PostFreeRoundsParams, body PostFreeRoundsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutFreeRoundsWithBody request with any body
	PutFreeRoundsWithBody(ctx context.Context, params *PutFreeRoundsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutFreeRounds(ctx context.Context, params *PutFreeRoundsParams, body PutFreeRoundsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFreeRoundsCancelWithBody request with any body
	PostFreeRoundsCancelWithBody(ctx context.Context, params *PostFreeRoundsCancelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFreeRoundsCancel(ctx context.Context, params *PostFreeRoundsCancelParams, body PostFreeRoundsCancelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGameCreateNewWithBody request with any body
	PostGameCreateNewWithBody(ctx context.Context, params *PostGameCreateNewParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGameCreateNew(ctx context.Context, params *PostGameCreateNewParams, body PostGameCreateNewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGameRoundHistoryWithBody request with any body
	PostGameRoundHistoryWithBody(ctx context.Context, params *PostGameRoundHistoryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGameRoundHistory(ctx context.Context, params *PostGameRoundHistoryParams, body PostGameRoundHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGames request
	GetGames(ctx context.Context, params *GetGamesParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetCurrencies(ctx context.Context, params *GetCurrenciesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCurrenciesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFreeRounds(ctx context.Context, params *GetFreeRoundsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFreeRoundsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFreeRoundsWithBody(ctx context.Context, params *PostFreeRoundsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFreeRoundsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFreeRounds(ctx context.Context, params *PostFreeRoundsParams, body PostFreeRoundsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFreeRoundsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFreeRoundsWithBody(ctx context.Context, params *PutFreeRoundsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFreeRoundsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFreeRounds(ctx context.Context, params *PutFreeRoundsParams, body PutFreeRoundsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFreeRoundsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFreeRoundsCancelWithBody(ctx context.Context, params *PostFreeRoundsCancelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFreeRoundsCancelRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFreeRoundsCancel(ctx context.Context, params *PostFreeRoundsCancelParams, body PostFreeRoundsCancelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFreeRoundsCancelRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGameCreateNewWithBody(ctx context.Context, params *PostGameCreateNewParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGameCreateNewRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGameCreateNew(ctx context.Context, params *PostGameCreateNewParams, body PostGameCreateNewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGameCreateNewRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGameRoundHistoryWithBody(ctx context.Context, params *PostGameRoundHistoryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGameRoundHistoryRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGameRoundHistory(ctx context.Context, params *PostGameRoundHistoryParams, body PostGameRoundHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGameRoundHistoryRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGames(ctx context.Context, params *GetGamesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGamesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetCurrenciesRequest generates requests for GetCurrencies
func NewGetCurrenciesRequest(server string, params *GetCurrenciesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/currencies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cid", runtime.ParamLocationQuery, params.CID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-REQUEST-SIGN", runtime.ParamLocationHeader, params.XREQUESTSIGN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-REQUEST-SIGN", headerParam0)

	}

	return req, nil
}

// NewGetFreeRoundsRequest generates requests for GetFreeRounds
func NewGetFreeRoundsRequest(server string, params *GetFreeRoundsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/free-rounds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cid", runtime.ParamLocationQuery, params.CID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.ID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExtID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ext_id", runtime.ParamLocationQuery, *params.ExtID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-REQUEST-SIGN", runtime.ParamLocationHeader, params.XREQUESTSIGN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-REQUEST-SIGN", headerParam0)

	}

	return req, nil
}

// NewPostFreeRoundsRequest calls the generic PostFreeRounds builder with application/json body
func NewPostFreeRoundsRequest(server string, params *PostFreeRoundsParams, body PostFreeRoundsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFreeRoundsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostFreeRoundsRequestWithBody generates requests for PostFreeRounds with any type of body
func NewPostFreeRoundsRequestWithBody(server string, params *PostFreeRoundsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/free-rounds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-REQUEST-SIGN", runtime.ParamLocationHeader, params.XREQUESTSIGN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-REQUEST-SIGN", headerParam0)

	}

	return req, nil
}

// NewPutFreeRoundsRequest calls the generic PutFreeRounds builder with application/json body
func NewPutFreeRoundsRequest(server string, params *PutFreeRoundsParams, body PutFreeRoundsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutFreeRoundsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPutFreeRoundsRequestWithBody generates requests for PutFreeRounds with any type of body
func NewPutFreeRoundsRequestWithBody(server string, params *PutFreeRoundsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/free-rounds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-REQUEST-SIGN", runtime.ParamLocationHeader, params.XREQUESTSIGN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-REQUEST-SIGN", headerParam0)

	}

	return req, nil
}

// NewPostFreeRoundsCancelRequest calls the generic PostFreeRoundsCancel builder with application/json body
func NewPostFreeRoundsCancelRequest(server string, params *PostFreeRoundsCancelParams, body PostFreeRoundsCancelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFreeRoundsCancelRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostFreeRoundsCancelRequestWithBody generates requests for PostFreeRoundsCancel with any type of body
func NewPostFreeRoundsCancelRequestWithBody(server string, params *PostFreeRoundsCancelParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/free-rounds/cancel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-REQUEST-SIGN", runtime.ParamLocationHeader, params.XREQUESTSIGN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-REQUEST-SIGN", headerParam0)

	}

	return req, nil
}

// NewPostGameCreateNewRequest calls the generic PostGameCreateNew builder with application/json body
func NewPostGameCreateNewRequest(server string, params *PostGameCreateNewParams, body PostGameCreateNewJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGameCreateNewRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostGameCreateNewRequestWithBody generates requests for PostGameCreateNew with any type of body
func NewPostGameCreateNewRequestWithBody(server string, params *PostGameCreateNewParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/game-create-new")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-REQUEST-SIGN", runtime.ParamLocationHeader, params.XREQUESTSIGN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-REQUEST-SIGN", headerParam0)

	}

	return req, nil
}

// NewPostGameRoundHistoryRequest calls the generic PostGameRoundHistory builder with application/json body
func NewPostGameRoundHistoryRequest(server string, params *PostGameRoundHistoryParams, body PostGameRoundHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGameRoundHistoryRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostGameRoundHistoryRequestWithBody generates requests for PostGameRoundHistory with any type of body
func NewPostGameRoundHistoryRequestWithBody(server string, params *PostGameRoundHistoryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/game-round-history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-REQUEST-SIGN", runtime.ParamLocationHeader, params.XREQUESTSIGN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-REQUEST-SIGN", headerParam0)

	}

	return req, nil
}

// NewGetGamesRequest generates requests for GetGames
func NewGetGamesRequest(server string, params *GetGamesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/games")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cid", runtime.ParamLocationQuery, params.CID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ThumbnailShape != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "thumbnail_shape", runtime.ParamLocationQuery, *params.ThumbnailShape); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-REQUEST-SIGN", runtime.ParamLocationHeader, params.XREQUESTSIGN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-REQUEST-SIGN", headerParam0)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetCurrenciesWithResponse request
	GetCurrenciesWithResponse(ctx context.Context, params *GetCurrenciesParams, reqEditors ...RequestEditorFn) (*GetCurrenciesResponse, error)

	// GetFreeRoundsWithResponse request
	GetFreeRoundsWithResponse(ctx context.Context, params *GetFreeRoundsParams, reqEditors ...RequestEditorFn) (*GetFreeRoundsResponse, error)

	// PostFreeRoundsWithBodyWithResponse request with any body
	PostFreeRoundsWithBodyWithResponse(ctx context.Context, params *PostFreeRoundsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFreeRoundsResponse, error)

	PostFreeRoundsWithResponse(ctx context.Context, params *PostFreeRoundsParams, body PostFreeRoundsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFreeRoundsResponse, error)

	// PutFreeRoundsWithBodyWithResponse request with any body
	PutFreeRoundsWithBodyWithResponse(ctx context.Context, params *PutFreeRoundsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFreeRoundsResponse, error)

	PutFreeRoundsWithResponse(ctx context.Context, params *PutFreeRoundsParams, body PutFreeRoundsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFreeRoundsResponse, error)

	// PostFreeRoundsCancelWithBodyWithResponse request with any body
	PostFreeRoundsCancelWithBodyWithResponse(ctx context.Context, params *PostFreeRoundsCancelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFreeRoundsCancelResponse, error)

	PostFreeRoundsCancelWithResponse(ctx context.Context, params *PostFreeRoundsCancelParams, body PostFreeRoundsCancelJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFreeRoundsCancelResponse, error)

	// PostGameCreateNewWithBodyWithResponse request with any body
	PostGameCreateNewWithBodyWithResponse(ctx context.Context, params *PostGameCreateNewParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGameCreateNewResponse, error)

	PostGameCreateNewWithResponse(ctx context.Context, params *PostGameCreateNewParams, body PostGameCreateNewJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGameCreateNewResponse, error)

	// PostGameRoundHistoryWithBodyWithResponse request with any body
	PostGameRoundHistoryWithBodyWithResponse(ctx context.Context, params *PostGameRoundHistoryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGameRoundHistoryResponse, error)

	PostGameRoundHistoryWithResponse(ctx context.Context, params *PostGameRoundHistoryParams, body PostGameRoundHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGameRoundHistoryResponse, error)

	// GetGamesWithResponse request
	GetGamesWithResponse(ctx context.Context, params *GetGamesParams, reqEditors ...RequestEditorFn) (*GetGamesResponse, error)
}

type GetCurrenciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CurrenciesResponse
	JSON400      *externalRef0.ErrorResponse
	JSON401      *externalRef0.ErrorResponse
	JSON500      *externalRef0.ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetCurrenciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCurrenciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFreeRoundsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FreeRoundsResponse
	JSON400      *externalRef0.ErrorResponse
	JSON401      *externalRef0.ErrorResponse
	JSON404      *externalRef0.ErrorResponse
	JSON500      *externalRef0.ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetFreeRoundsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFreeRoundsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFreeRoundsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateFreeRoundsResponse
	JSON401      *externalRef0.ErrorResponse
	JSON409      *externalRef0.ErrorResponse
	JSON500      *externalRef0.ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostFreeRoundsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFreeRoundsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutFreeRoundsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateFreeRoundsResponse
	JSON401      *externalRef0.ErrorResponse
	JSON404      *externalRef0.ErrorResponse
	JSON500      *externalRef0.ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PutFreeRoundsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutFreeRoundsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFreeRoundsCancelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CancelFreeRoundsResponse
	JSON401      *externalRef0.ErrorResponse
	JSON404      *externalRef0.ErrorResponse
	JSON500      *externalRef0.ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostFreeRoundsCancelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFreeRoundsCancelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGameCreateNewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateNewGameResponse
	JSON401      *externalRef0.ErrorResponse
	JSON500      *externalRef0.ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostGameCreateNewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGameCreateNewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGameRoundHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetGameRoundHistoryResponse
	JSON401      *externalRef0.ErrorResponse
	JSON404      *externalRef0.ErrorResponse
	JSON500      *externalRef0.ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostGameRoundHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGameRoundHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGamesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GamesResponse
	JSON400      *externalRef0.ErrorResponse
	JSON401      *externalRef0.ErrorResponse
	JSON500      *externalRef0.ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGamesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGamesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetCurrenciesWithResponse request returning *GetCurrenciesResponse
func (c *ClientWithResponses) GetCurrenciesWithResponse(ctx context.Context, params *GetCurrenciesParams, reqEditors ...RequestEditorFn) (*GetCurrenciesResponse, error) {
	rsp, err := c.GetCurrencies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCurrenciesResponse(rsp)
}

// GetFreeRoundsWithResponse request returning *GetFreeRoundsResponse
func (c *ClientWithResponses) GetFreeRoundsWithResponse(ctx context.Context, params *GetFreeRoundsParams, reqEditors ...RequestEditorFn) (*GetFreeRoundsResponse, error) {
	rsp, err := c.GetFreeRounds(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFreeRoundsResponse(rsp)
}

// PostFreeRoundsWithBodyWithResponse request with arbitrary body returning *PostFreeRoundsResponse
func (c *ClientWithResponses) PostFreeRoundsWithBodyWithResponse(ctx context.Context, params *PostFreeRoundsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFreeRoundsResponse, error) {
	rsp, err := c.PostFreeRoundsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFreeRoundsResponse(rsp)
}

func (c *ClientWithResponses) PostFreeRoundsWithResponse(ctx context.Context, params *PostFreeRoundsParams, body PostFreeRoundsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFreeRoundsResponse, error) {
	rsp, err := c.PostFreeRounds(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFreeRoundsResponse(rsp)
}

// PutFreeRoundsWithBodyWithResponse request with arbitrary body returning *PutFreeRoundsResponse
func (c *ClientWithResponses) PutFreeRoundsWithBodyWithResponse(ctx context.Context, params *PutFreeRoundsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFreeRoundsResponse, error) {
	rsp, err := c.PutFreeRoundsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFreeRoundsResponse(rsp)
}

func (c *ClientWithResponses) PutFreeRoundsWithResponse(ctx context.Context, params *PutFreeRoundsParams, body PutFreeRoundsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFreeRoundsResponse, error) {
	rsp, err := c.PutFreeRounds(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFreeRoundsResponse(rsp)
}

// PostFreeRoundsCancelWithBodyWithResponse request with arbitrary body returning *PostFreeRoundsCancelResponse
func (c *ClientWithResponses) PostFreeRoundsCancelWithBodyWithResponse(ctx context.Context, params *PostFreeRoundsCancelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFreeRoundsCancelResponse, error) {
	rsp, err := c.PostFreeRoundsCancelWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFreeRoundsCancelResponse(rsp)
}

func (c *ClientWithResponses) PostFreeRoundsCancelWithResponse(ctx context.Context, params *PostFreeRoundsCancelParams, body PostFreeRoundsCancelJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFreeRoundsCancelResponse, error) {
	rsp, err := c.PostFreeRoundsCancel(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFreeRoundsCancelResponse(rsp)
}

// PostGameCreateNewWithBodyWithResponse request with arbitrary body returning *PostGameCreateNewResponse
func (c *ClientWithResponses) PostGameCreateNewWithBodyWithResponse(ctx context.Context, params *PostGameCreateNewParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGameCreateNewResponse, error) {
	rsp, err := c.PostGameCreateNewWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGameCreateNewResponse(rsp)
}

func (c *ClientWithResponses) PostGameCreateNewWithResponse(ctx context.Context, params *PostGameCreateNewParams, body PostGameCreateNewJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGameCreateNewResponse, error) {
	rsp, err := c.PostGameCreateNew(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGameCreateNewResponse(rsp)
}

// PostGameRoundHistoryWithBodyWithResponse request with arbitrary body returning *PostGameRoundHistoryResponse
func (c *ClientWithResponses) PostGameRoundHistoryWithBodyWithResponse(ctx context.Context, params *PostGameRoundHistoryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGameRoundHistoryResponse, error) {
	rsp, err := c.PostGameRoundHistoryWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGameRoundHistoryResponse(rsp)
}

func (c *ClientWithResponses) PostGameRoundHistoryWithResponse(ctx context.Context, params *PostGameRoundHistoryParams, body PostGameRoundHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGameRoundHistoryResponse, error) {
	rsp, err := c.PostGameRoundHistory(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGameRoundHistoryResponse(rsp)
}

// GetGamesWithResponse request returning *GetGamesResponse
func (c *ClientWithResponses) GetGamesWithResponse(ctx context.Context, params *GetGamesParams, reqEditors ...RequestEditorFn) (*GetGamesResponse, error) {
	rsp, err := c.GetGames(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGamesResponse(rsp)
}

// ParseGetCurrenciesResponse parses an HTTP response from a GetCurrenciesWithResponse call
func ParseGetCurrenciesResponse(rsp *http.Response) (*GetCurrenciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCurrenciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CurrenciesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetFreeRoundsResponse parses an HTTP response from a GetFreeRoundsWithResponse call
func ParseGetFreeRoundsResponse(rsp *http.Response) (*GetFreeRoundsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFreeRoundsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FreeRoundsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostFreeRoundsResponse parses an HTTP response from a PostFreeRoundsWithResponse call
func ParsePostFreeRoundsResponse(rsp *http.Response) (*PostFreeRoundsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFreeRoundsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateFreeRoundsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutFreeRoundsResponse parses an HTTP response from a PutFreeRoundsWithResponse call
func ParsePutFreeRoundsResponse(rsp *http.Response) (*PutFreeRoundsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutFreeRoundsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateFreeRoundsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostFreeRoundsCancelResponse parses an HTTP response from a PostFreeRoundsCancelWithResponse call
func ParsePostFreeRoundsCancelResponse(rsp *http.Response) (*PostFreeRoundsCancelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFreeRoundsCancelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CancelFreeRoundsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostGameCreateNewResponse parses an HTTP response from a PostGameCreateNewWithResponse call
func ParsePostGameCreateNewResponse(rsp *http.Response) (*PostGameCreateNewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGameCreateNewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateNewGameResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostGameRoundHistoryResponse parses an HTTP response from a PostGameRoundHistoryWithResponse call
func ParsePostGameRoundHistoryResponse(rsp *http.Response) (*PostGameRoundHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGameRoundHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetGameRoundHistoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGamesResponse parses an HTTP response from a GetGamesWithResponse call
func ParseGetGamesResponse(rsp *http.Response) (*GetGamesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGamesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GamesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Currencies Information
	// (GET /currencies)
	GetCurrencies(ctx echo.Context, params GetCurrenciesParams) error
	// Get Free Rounds
	// (GET /free-rounds)
	GetFreeRounds(ctx echo.Context, params GetFreeRoundsParams) error
	// Create Free Rounds
	// (POST /free-rounds)
	PostFreeRounds(ctx echo.Context, params PostFreeRoundsParams) error
	// Update Free Rounds
	// (PUT /free-rounds)
	PutFreeRounds(ctx echo.Context, params PutFreeRoundsParams) error
	// Cancel Free Rounds
	// (POST /free-rounds/cancel)
	PostFreeRoundsCancel(ctx echo.Context, params PostFreeRoundsCancelParams) error
	// Create New Game
	// (POST /game-create-new)
	PostGameCreateNew(ctx echo.Context, params PostGameCreateNewParams) error
	// Get Game Round History
	// (POST /game-round-history)
	PostGameRoundHistory(ctx echo.Context, params PostGameRoundHistoryParams) error
	// Get Games Information
	// (GET /games)
	GetGames(ctx echo.Context, params GetGamesParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCurrencies converts echo context to params.
func (w *ServerInterfaceWrapper) GetCurrencies(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCurrenciesParams
	// ------------- Required query parameter "cid" -------------

	err = runtime.BindQueryParameter("form", true, true, "cid", ctx.QueryParams(), &params.CID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cid: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-REQUEST-SIGN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-REQUEST-SIGN")]; found {
		var XREQUESTSIGN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-REQUEST-SIGN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-REQUEST-SIGN", valueList[0], &XREQUESTSIGN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-REQUEST-SIGN: %s", err))
		}

		params.XREQUESTSIGN = XREQUESTSIGN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-REQUEST-SIGN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCurrencies(ctx, params)
	return err
}

// GetFreeRounds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFreeRounds(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFreeRoundsParams
	// ------------- Required query parameter "cid" -------------

	err = runtime.BindQueryParameter("form", true, true, "cid", ctx.QueryParams(), &params.CID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cid: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.ID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "ext_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "ext_id", ctx.QueryParams(), &params.ExtID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ext_id: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-REQUEST-SIGN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-REQUEST-SIGN")]; found {
		var XREQUESTSIGN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-REQUEST-SIGN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-REQUEST-SIGN", valueList[0], &XREQUESTSIGN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-REQUEST-SIGN: %s", err))
		}

		params.XREQUESTSIGN = XREQUESTSIGN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-REQUEST-SIGN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFreeRounds(ctx, params)
	return err
}

// PostFreeRounds converts echo context to params.
func (w *ServerInterfaceWrapper) PostFreeRounds(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostFreeRoundsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-REQUEST-SIGN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-REQUEST-SIGN")]; found {
		var XREQUESTSIGN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-REQUEST-SIGN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-REQUEST-SIGN", valueList[0], &XREQUESTSIGN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-REQUEST-SIGN: %s", err))
		}

		params.XREQUESTSIGN = XREQUESTSIGN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-REQUEST-SIGN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFreeRounds(ctx, params)
	return err
}

// PutFreeRounds converts echo context to params.
func (w *ServerInterfaceWrapper) PutFreeRounds(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PutFreeRoundsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-REQUEST-SIGN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-REQUEST-SIGN")]; found {
		var XREQUESTSIGN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-REQUEST-SIGN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-REQUEST-SIGN", valueList[0], &XREQUESTSIGN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-REQUEST-SIGN: %s", err))
		}

		params.XREQUESTSIGN = XREQUESTSIGN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-REQUEST-SIGN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutFreeRounds(ctx, params)
	return err
}

// PostFreeRoundsCancel converts echo context to params.
func (w *ServerInterfaceWrapper) PostFreeRoundsCancel(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostFreeRoundsCancelParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-REQUEST-SIGN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-REQUEST-SIGN")]; found {
		var XREQUESTSIGN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-REQUEST-SIGN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-REQUEST-SIGN", valueList[0], &XREQUESTSIGN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-REQUEST-SIGN: %s", err))
		}

		params.XREQUESTSIGN = XREQUESTSIGN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-REQUEST-SIGN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFreeRoundsCancel(ctx, params)
	return err
}

// PostGameCreateNew converts echo context to params.
func (w *ServerInterfaceWrapper) PostGameCreateNew(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostGameCreateNewParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-REQUEST-SIGN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-REQUEST-SIGN")]; found {
		var XREQUESTSIGN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-REQUEST-SIGN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-REQUEST-SIGN", valueList[0], &XREQUESTSIGN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-REQUEST-SIGN: %s", err))
		}

		params.XREQUESTSIGN = XREQUESTSIGN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-REQUEST-SIGN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostGameCreateNew(ctx, params)
	return err
}

// PostGameRoundHistory converts echo context to params.
func (w *ServerInterfaceWrapper) PostGameRoundHistory(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostGameRoundHistoryParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-REQUEST-SIGN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-REQUEST-SIGN")]; found {
		var XREQUESTSIGN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-REQUEST-SIGN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-REQUEST-SIGN", valueList[0], &XREQUESTSIGN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-REQUEST-SIGN: %s", err))
		}

		params.XREQUESTSIGN = XREQUESTSIGN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-REQUEST-SIGN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostGameRoundHistory(ctx, params)
	return err
}

// GetGames converts echo context to params.
func (w *ServerInterfaceWrapper) GetGames(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGamesParams
	// ------------- Required query parameter "cid" -------------

	err = runtime.BindQueryParameter("form", true, true, "cid", ctx.QueryParams(), &params.CID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cid: %s", err))
	}

	// ------------- Optional query parameter "thumbnail_shape" -------------

	err = runtime.BindQueryParameter("form", true, false, "thumbnail_shape", ctx.QueryParams(), &params.ThumbnailShape)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter thumbnail_shape: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-REQUEST-SIGN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-REQUEST-SIGN")]; found {
		var XREQUESTSIGN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-REQUEST-SIGN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-REQUEST-SIGN", valueList[0], &XREQUESTSIGN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-REQUEST-SIGN: %s", err))
		}

		params.XREQUESTSIGN = XREQUESTSIGN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-REQUEST-SIGN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGames(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/currencies", wrapper.GetCurrencies)
	router.GET(baseURL+"/free-rounds", wrapper.GetFreeRounds)
	router.POST(baseURL+"/free-rounds", wrapper.PostFreeRounds)
	router.PUT(baseURL+"/free-rounds", wrapper.PutFreeRounds)
	router.POST(baseURL+"/free-rounds/cancel", wrapper.PostFreeRoundsCancel)
	router.POST(baseURL+"/game-create-new", wrapper.PostGameCreateNew)
	router.POST(baseURL+"/game-round-history", wrapper.PostGameRoundHistory)
	router.GET(baseURL+"/games", wrapper.GetGames)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"b/8KAAD//wjv1kMdUAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "../common-components.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
